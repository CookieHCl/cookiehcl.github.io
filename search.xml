<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>굳이굳이 Hexo로 블로그 시작한 이유</title>
    <url>/posts/1/</url>
    <content><![CDATA[<h1>동기</h1>
<p>Github Pages랑 Markdown을 이용해서 블로그를 만들고 싶어서 시작했다.</p>
<p>처음에는 직접 html이랑 javascript를 배워서 만들어볼까 했지만, 맨땅에서 시작하기엔 웹프로그래밍에 대해 아는게 없었고, 블로그의 주 목적은 게시글을 작성하는 건데, html 단계부터 만들기 시작하면 내가 게시글을 만들 때마다 html을 새로 만들거나, 티스토리에 있는 것마냥 게시글 편집기를 직접 만들어야 할 것 같아서 포기했다.</p>
<p>결국 블로그의 주 목적은 <s>정확히는 블로그가 망하지 않으려면</s> 게시글을 작성하는 것이고, 이를 위해서는 게시글을 <strong>쉽고 빠르게</strong> 작성할 수 있어야 한다고 생각해서 Markdown 블로그를 만들었다.</p>
<p>물론 티스토리 블로그 같은 서비스를 이용해도 되지만, 혹시나 먼 미래에 갑자기 'html부터 새로 만들어보는 나만의 블로그' 같은 짓을 할 수도 있을 것 같아서 게시글들을 쉽게 이전할 수 있도록 Markdown으로 게시글을 작성했다.</p>
<h1>그래서 왜 Hexo?</h1>
<p>사실 가장 잘 알려진 방법은 <a href="https://jekyllrb-ko.github.io/">Jekyll</a>을 사용하는 것이다. 일단 Github Pages에서 <a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll">공식적으로 권장하기도</a> 하고, Markdown을 사용한 static site generator중에서는 가장 유명할 것이다.</p>
<p>하지만 굳이굳이 Hexo를 사용해서 블로그를 시작한 이유는 게시글 주소 때문인데, Jekyll은 주소로 게시글 제목, 날짜 등을 사용하지만 <em>(ex: blog.com/2023/11/30/blog_sijak)</em> Hexo는 티스토리처럼 주소로 숫자를 사용하는 <a href="https://github.com/rozbo/hexo-abbrlink2">플러그인</a>이 있었다. <em>(ex: blog.com/123)</em></p>
<p>막상 시작해보니 Hexo를 사용하게 된 계기인 주소 플러그인이 잘 작동하지 않는 문제점이 있긴 했지만, Hexo에서 지원하는 기능들이 상당히 많아서 Jekyll로 시작했으면 더 불편했을 것 같다.</p>
<h2 id="장점">장점</h2>
<ul>
<li>대부분 Hexo 유저가 사용하는 <a href="https://theme-next.js.org/">Next Theme</a>이 정말 이쁘다!</li>
<li>ruby를 사용하는 Jekyll과 달리, node.js를 사용해서 npm으로 쉽게 설치가 가능하다.
<ul>
<li>솔직히 ruby는 아무도 안 쓰잖아...</li>
</ul>
</li>
<li>중국인이 사용하기 때문에 다국어 지원이 잘 되어있어 겸사겸사 한국인도 이득을 봤다.</li>
<li>Jekyll은 진짜 글만 모아둔 느낌인데 Hexo는 카테고리, 댓글, 글 검색 기능 등 일반적인 블로그 서비스들이 제공하는 기능들도 지원하려고 노력한다.</li>
<li>syntax highlighting, LaTeX 지원이 기본으로 되어있다.</li>
<li>이외에도 유튜브 동영상, 그래프 등 Markdown으로 표현할 수 없는 부분을 지원하기 위한 플러그인들이 많다.</li>
<li>광고, 블로그 홍보에 미쳐있어서 블로그 홍보하는 documentation까지 있다.</li>
</ul>
<h2 id="단점">단점</h2>
<ul>
<li>수상할 정도로 중국인들만 사용해서 그냥 귀찮게 영어 쓰는 대신 중국어로 issue, plugin 등을 남기는 경우가 많다. 심하면 그냥 README를 중국어로 적는 경우도 있다.</li>
<li>Hexo도 광고에 미쳐있다. 무려 공식 documentation에 광고가 뜬다....</li>
<li>Hexo의 기능이 뛰어나기 보단 <a href="https://theme-next.js.org/">Next Theme</a>에서 지원하는 기능이 많아 테마가 제한되는 느낌이 있다.
<ul>
<li>Hexo plugin들도 Next Theme을 사용하는 가정 하에 만드는 경우도 있다.</li>
<li>위 장점들 중에서도 Next Theme에만 해당되는 장점들도 있다.</li>
<li>아마 다른 테마도 맞는 plugin들만 깔아주면 Next Theme과 같은 기능을 할 것 같긴 한데 다른 테마는 안 써봐서 모르겠다.</li>
</ul>
</li>
<li>유저 수 적은 서비스가 늘 그렇듯이 API 등 심화된 부분으로 가면 documentation이 잘 안 되어있다. 덕분에 plugin 만들 때 좀 고생했다.</li>
</ul>
<h1>결론</h1>
<p>그래서 Hexo를 써야 하냐고 묻는다면 쓰는게 좋은 것 같다. <s>본인처럼</s> 주는 것에 만족하지 못 하고 직접 건드리려고 하면 조금 애먹을 수 있지만 Next Theme이 워낙 잘 되어있어서 건드릴 일이 거의 없다.</p>
<p>Jekyll은 정말 기본적인 기능만 지원해서 카테고리, 검색 기능 같은 것을 지원하려면 어차피 plugin들을 찾아보거나, 직접 코딩하는 등 힘들게 살아야하는데 Hexo는 수많은 중국인들이 이미 귀찮은 작업들을 다 끝내줘서 찾아볼 필요가 없다. 감사합니다 따-거</p>
]]></content>
      <categories>
        <category>BLOG</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo로 블로그 시작하기</title>
    <url>/posts/2/</url>
    <content><![CDATA[<h1>설치</h1>
<p>먼저 <a href="https://nodejs.org/en/download/">node.js</a>와 <a href="https://git-scm.com/downloads">git</a>을 깔아준다.</p>
<p>그 후 hexo를 설치한 다음 블로그 폴더를 만들어준다.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h1>실행</h1>
<p><code>hexo new --path &lt;path&gt; &lt;title&gt;</code>로 원하는 경로에 게시글을 만들 수 있다. 물론 Front matter만 알맞게 작성한다면 직접 Markdown 파일을 만들어도 상관없다.</p>
<p>게시글을 다 작성했다면 <code>hexo generate</code>로 블로그를 생성하고, <code>hexo server</code>로 블로그를 로컬 서버로 구동시킨다.<br>
<code>hexo generate -w</code>를 사용하면 파일이 편집될 때마다 블로그를 계속 생성해준다.</p>
<p>문제는 <code>hexo server</code>가 hot/live reloading을 지원하지 않아 블로그가 새로 생성돼도 브라우저를 새로고침 해야 반영이 된다.<br>
그래서 어쩔 수 없이 <a href="https://browsersync.io/">Browsersync</a>를 깔아야 했는데, <code>npx browser-sync ./public -w</code>를 사용하면 파일이 편집될 때마다 새로 생성된 블로그를 볼 수 있다.</p>
<p>일부 변경사항은 <code>hexo generate</code>를 아무리 해도 적용이 안 되는데, (_config.yml 변경 등) 이때는 <code>hexo clean</code>으로 캐시를 지워줘야 한다.</p>
<h1>배포</h1>
<p>GitHub Pages니까 GitHub Actions을 사용하기로 했다.<br>
먼저 repository 설정에서 GitHub Pages를 활성화시켜야 한다.</p>
<ul>
<li>Code and automation - Pages에서 Source를 <strong>Deploy from branch</strong>로 해준다.</li>
<li>Branch는 <code>gh-pages</code>로 선택한다.</li>
</ul>
<p>이후 아래 파일을 <code>.github/workflows/pages.yml</code>으로 저장한다.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">pages:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">permissions:</span></span><br><span class="line">      <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">LTS</span> <span class="string">Node.js</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;lts/*&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">NPM</span> <span class="string">dependencies</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">npm-cache-$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm-cache-$&#123;&#123; runner.os &#125;&#125;</span></span><br><span class="line"><span class="string">          npm-cache</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install</span></span><br><span class="line"><span class="string">        npx hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/actions/checkout">actions/checkout</a>, <a href="https://github.com/actions/setup-node">actions/setup-node</a>는 말 그대로의 일을 하고, <a href="https://github.com/actions/cache">actions/cache</a>는 workflow가 빠르게 돌 수 있도록 <code>node_modules</code> 폴더를 캐싱해둔다.</p>
<p>그 후 <code>npx hexo generate</code>로 블로그를 생성한 다음 <a href="https://github.com/peaceiris/actions-gh-pages">peaceiris/actions-gh-pages</a>로 <code>./public</code> 폴더를 GitHub Pages branch에 올리면 된다.</p>
<h1>NexT Theme 설치</h1>
<p>NexT Theme 설치는 <code>npm install hexo-theme-next</code>로 간단하게 할 수 있다. 이후 <code>_config.yml</code>에서 <code>theme: next</code>로 설정해주면 된다.</p>
<p>그 후 NexT Theme 설정 파일을 따로 만들어줘야 하는데, <code>node_modules/hexo-theme-next/_config.yml</code>을 <code>_config.next.yml</code>로 복사해주고 <code>_config.next.yml</code>만 수정하면 된다.</p>
<h1>What's Next...?</h1>
<p>이 이후로는 자유롭게 <a href="https://hexo.io/docs/configuration.html">hexo documentation</a>과 <a href="https://theme-next.js.org/docs/theme-settings/">NexT documentation</a>을 참고하면서 원하는 대로 수정하면 된다.</p>
<p>다른 <a href="https://hexo.io/plugins/">plugin</a>들도 살펴보면서 필요한 것이 있다면 다운받아도 된다. 몇 가지 추천 플러그인들은 다음과 같다.</p>
<ul>
<li><a href="https://github.com/xu-song/hexo-auto-category">hexo-auto-category</a>: post의 경로대로 category를 만들어준다.</li>
<li><a href="https://github.com/chekun/hexo-excerpt">hexo-excerpt</a>: 블로그 메인화면에서 post가 너무 길 경우 일부만 보여준다.</li>
<li><a href="https://github.com/next-theme/hexo-generator-searchdb">hexo-generator-searchdb</a>: 검색기능을 만들어준다! 자세한 설명은 <a href="https://theme-next.js.org/docs/third-party-services/search-services.html?highlight=searchdb#Local-Search">NexT documentation</a>을 참고하자.</li>
</ul>
]]></content>
      <categories>
        <category>BLOG</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo permalink 숫자로 나오게 하기</title>
    <url>/posts/undefined/</url>
    <content><![CDATA[<h1>문제점</h1>
<p>분명 Hexo에는 이걸 지원하는 <a href="https://github.com/rozbo/hexo-abbrlink2">plugin</a>이 있고, 이것 때문에 Hexo로 블로그 만들기를 시작했는데, 정작 이 plugin이 작동하질 않았다...</p>
<p>아직 Hexo 작동원리를 정확히 아는 것은 아니라 모르겠지만, 대충 이유를 추측하자면 저 plugin은 <a href="https://hexo.io/api/filter_post-permalink">post_permalink</a> filter에서 주소를 계산하는데, 게시글 주소가 여러 곳에서 쓰이다 보니 (메인화면, 이전/다음 글, 카테고리 등...) post_permalink filter가 여러 번 불린다.</p>
<p>근데 plugin 제작자가 이럴거라고 생각을 못 했는지, 아니면 post_permalink가 불릴때마다 순서가 뒤죽박죽이라던지, 여러가지 이유로 게시글 주소를 계산할 때마다 permalink를 다르게 계산하고, 결국 링크가 제대로 작동하지 않는 문제가 생겼다.</p>
<h1>해결책</h1>
<p>결국 plugin을 직접 만들기로 했다... 아래 파일을 <code>scripts/abbrlink.js</code>로 저장한다.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> abbrlinks = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;before_generate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> posts = hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">let</span> undefined_posts = [];</span><br><span class="line">    <span class="keyword">let</span> max_abbrlink = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get max abbrlink</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> post <span class="keyword">of</span> posts) &#123;</span><br><span class="line">        <span class="keyword">if</span> (post.<span class="property">abbrlink</span>) &#123;</span><br><span class="line">            abbrlinks[post.<span class="property">_id</span>] = post.<span class="property">abbrlink</span>;</span><br><span class="line">            max_abbrlink = <span class="title class_">Math</span>.<span class="title function_">max</span>(max_abbrlink, post.<span class="property">abbrlink</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            undefined_posts.<span class="title function_">push</span>(post);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate abbrlink for undefined posts</span></span><br><span class="line">    undefined_posts.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">date</span> - b.<span class="property">date</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> post <span class="keyword">of</span> undefined_posts) &#123;</span><br><span class="line">        abbrlinks[post.<span class="property">_id</span>] = ++max_abbrlink;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;post_permalink&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// if abbrlink is already set, do nothing</span></span><br><span class="line">    <span class="keyword">if</span> (data.<span class="property">abbrlink</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set abbrlink if abbrlink is generated</span></span><br><span class="line">    <span class="keyword">const</span> abbrlink = abbrlinks[data.<span class="property">_id</span>];</span><br><span class="line">    <span class="keyword">if</span> (abbrlink) &#123;</span><br><span class="line">        data.<span class="property">abbrlink</span> = abbrlink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>항상 게시글 주소가 똑같이 유지되도록 <a href="https://hexo.io/api/filter#before-generate">before_generate</a> filter에서 미리 주소를 전부 계산한 다음, post_permalink filter에서는 그냥 계산한 주소를 붙이기만 하기로 했다.</p>
<p>계산한 숫자 주소는 원본 plugin에서 쓰던 대로 <strong>abbrlink</strong>라고 부르기로 했다.</p>
<p>웃기게도 가장 애먹은 부분은 모든 게시글을 불러오려면 <code>const posts = hexo.locals.get('posts').data;</code>를 써야 된다는 것을 알아내는 일이였다... 제발 documentation 똑바로 좀 만들어라...</p>
<p>이후는 abbrlink가 없는 post들을 찾은 다음, 날짜 순으로 정렬해 쓴 순더대로 abbrlink를 붙여주는게 끝이다.</p>
]]></content>
      <categories>
        <category>BLOG</category>
      </categories>
  </entry>
</search>
